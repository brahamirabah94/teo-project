trigger:
- main

stages:
- stage: Terraform_init_plan

  pool:
    vmImage: ubuntu-latest

  jobs:

  - job: terraform_init_plan

    steps:

    - task: TerraformInstaller@0
      displayName: Install TF 0.14.8
      inputs:
        terraformVersion: '0.14.8'

    - task: TerraformTaskV1@0
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'MyConnectionAzure'
        backendAzureRmResourceGroupName: 'rg-teoschool-rabah-001'
        backendAzureRmStorageAccountName: 'sateotfrabah'
        backendAzureRmContainerName: 'container-tfstate'
        backendAzureRmKey: 'terraform.state'

    - task: TerraformTaskV1@0
      displayName: terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'MyConnectionAzure'

    - task: TerraformTaskV1@0
      displayName: terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'MyConnectionAzure'

- stage: configure_cluster_AKS

  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: configure_cluster_AKS
    steps:
    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'

    - task: AzureCLI@2
      displayName: Install Fluxctl
      inputs:
        azureSubscription: 'MyConnectionAzure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          export USERREPO=brahamirabah94

          echo "acquiring credentials for cluster"
          az aks get-credentials -n teoSch-aks-cluster -g rg-teoschool-rabah-001 --admin
          
          echo "installing fluxctl"
          sudo snap install fluxctl --classic

          echo "ensuring flux namespace exists"
          kubectl create namespace flux

          echo "installing flux. adding fluxcd helm repo"
          helm repo add fluxcd https://charts.fluxcd.io

          echo "installing flux. installing the main operator"
          helm upgrade -i flux fluxcd/flux \
            --set git.url=git@github.com:${USERREPO}/teo-project.git \
            --set git.user=${USERREPO} \
            --set git.path=k8s-conf-spec/ \
            --set git.branch=main \
            --set registry.acr.enabled=true \
            --namespace flux

          echo "installing flux. installing the helm operator"
          helm upgrade -i helm-operator fluxcd/helm-operator \
            --set git.ssh.secretName=flux-git-deploy \
            --namespace flux \
            --set helm.versions=v3

          sleep 5

          echo "ensuring monitoring namespace exists"
          kubectl create namespace monitoring

          echo "adding prometheus & grafana helm repo"
          helm repo add stable https://charts.helm.sh/stable
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

          echo "installing prometheus charts"
          helm install stable prometheus-community/kube-prometheus-stack --namespace monitoring

          sleep 5

          helm install elasticsearch stable/elasticsearch

          kubectl apply -f https://raw.githubusercontent.com/brahamirabah94/teo-project/main/infras/fluentd-daemonset-elasticsearch.yaml
          
          helm install kibana stable/kibana -f https://raw.githubusercontent.com/brahamirabah94/teo-project/main/infras/kibana-values.yaml
         
          echo "acquiring public ssh key for flux"
          STAGING_SSH_PUBLIC_KEY=$(fluxctl identity --k8s-fwd-ns flux)
          echo $STAGING_SSH_PUBLIC_KEY

          sleep 300

          echo "acquiring credentials for cluster"
          az aks get-credentials -n teoSch-aks-cluster -g rg-teoschool-rabah-001 --admin
          
          echo "configure policy to sync fluxcd with dockerhub"
          fluxctl policy -w default:deployment/hasher-deploy --tag "hasher-app=1.0.*" --k8s-fwd-ns flux
          fluxctl policy -w default:deployment/rng-deploy --tag "rng-app=1.0.*" --k8s-fwd-ns flux
          fluxctl policy -w default:deployment/webui-Deployment --tag "webui-app=1.0.*" --k8s-fwd-ns flux
          fluxctl policy -w default:deployment/worker-Deployment --tag "worker-app=1.0.*" --k8s-fwd-ns flux
