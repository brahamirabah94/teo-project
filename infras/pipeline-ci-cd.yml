trigger:
- main

stages:
- stage: Terraform_init_plan

  pool:
    vmImage: ubuntu-latest

  jobs:

  - job: terraform_init_plan

    steps:

    - task: TerraformInstaller@0
      displayName: Install TF 0.14.8
      inputs:
        terraformVersion: '0.14.8'

    - task: TerraformTaskV1@0
      displayName: terraform init
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'MyConnectionAzure'
        backendAzureRmResourceGroupName: 'rg-teoschool-rabah-001'
        backendAzureRmStorageAccountName: 'sateotfrabah'
        backendAzureRmContainerName: 'container-tfstate'
        backendAzureRmKey: 'terraform.state'

    - task: TerraformTaskV1@0
      displayName: terraform plan
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'MyConnectionAzure'

    - task: TerraformTaskV1@0
      displayName: terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceNameAzureRM: 'MyConnectionAzure'

- stage: configure_cluster_AKS

  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: configure_cluster_AKS

    steps:

    - task: HelmInstaller@1
      inputs:
        helmVersionToInstall: 'latest'

    - task: AzureCLI@2
      displayName: Install Fluxctl
      inputs:
        azureSubscription: 'MyConnectionAzure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -e

          export USERREPO=brahamirabah94

          echo "acquiring credentials for cluster"
          az aks get-credentials -n teoSch-aks-cluster -g rg-teoschool-rabah-001 --admin
          
          echo "installing fluxctl"
          sudo snap install fluxctl --classic

          echo "ensuring flux namespace exists"
          kubectl create namespace flux

          echo "installing flux. adding fluxcd helm repo"
          helm repo add fluxcd https://charts.fluxcd.io

          echo "installing flux. installing the main operator"
          helm upgrade -i flux fluxcd/flux \
            --set git.url=git@github.com:${USERREPO}/teo-project.git) \
            --set git.user=${USERREPO} \
            --set git.path=k8s-conf-spec/ \
            --set git.branch=flux-test
            --set registry.acr.enabled=true \
            --namespace flux

          echo "installing flux. installing the helm operator"
          helm upgrade -i helm-operator fluxcd/helm-operator \
            --set git.ssh.secretName=flux-git-deploy \
            --namespace flux \
            --set helm.versions=v3

          sleep 5
          echo "acquiring public ssh key for flux"
          STAGING_SSH_PUBLIC_KEY=$(fluxctl identity --k8s-fwd-ns flux)
          echo "##vso[task.setvariable variable=Staging.Flux.SshPublicKey;issecret=true]$STAGING_SSH_PUBLIC_KEY"

          sleep 5
          echo "adding prometheus & grafana helm repo"
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          echo "ensuring monitoring namespace exists"
          kubectl create namespace monitoring

          echo "installing prometheus charts"
          helm install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            --set alertmanager.persistentVolume.storageClass="default" \
            --set server.persistentVolume.storageClass="default"

          echo "installing grafana charts"
          helm install grafana grafana/grafana \
            --namespace monitoring \
            --set persistence.storageClassName="default" \
            --set persistence.enabled=true \
            --set adminPassword='mypass' \
            --values grafana.yaml \
            --set service.type=LoadBalancer

          sleep 5
          helm repo add stable https://charts.helm.sh/stable

          helm install elasticsearch stable/elasticsearch #elasticsearch helm charts

          kubectl apply -f fluentd-daemonset-elasticsearch.yaml

          helm install kibana stable/kibana -f kibana-values.yaml
